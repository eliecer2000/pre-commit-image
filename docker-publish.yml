name: Build, Versioning, and Release

on:
  push:
    branches:
      - main # Solo se ejecuta cuando hay un push a la rama main
permissions:
  contents: read # for checkout

jobs:
  build-and-release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false # <--- this
      - name: Set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm install

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Run semantic-release to handle versioning, changelog, and tagging
        continue-on-error: false
        id: semantic
        run: |
          npx semantic-release > semantic_release_output.txt
          # Extract version from the output
          version=$(grep -oP "The next release version is \K[0-9]+\.[0-9]+\.[0-9]+" semantic_release_output.txt)
          if [ -n "$version" ]; then
            echo "New version detected: $version"
            # echo "{version}={$version}" >> $GITHUB_OUTPUT
            # echo "{new_release_published}={true}" >> $GITHUB_OUTPUT


            echo "::set-output name=version::$version"
            echo "::set-output name=new_release_published::true"
          else
            echo "No new version was published."
            # echo "{version}={none}" >> $GITHUB_OUTPUT
            # echo "{new_release_published}={false}" >> $GITHUB_OUTPUT


            echo "::set-output name=version::none"
            echo "::set-output name=new_release_published::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      - name: Use the new version
        run: |
          echo "The published version is ${{ steps.semantic.outputs.version }}"
          echo "The published version is ${{ steps.semantic.outputs.new_release_published }}"

      - name: Build and push Docker image
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            eliecer2000/pre-commit-image:latest
            eliecer2000/pre-commit-image:${{ steps.semantic.outputs.version || 'latest' }}

      # - name: Commit and push changelog
      #   run: |
      #     git add CHANGELOG.md
      #     git commit -m "chore(release): update changelog for version ${{ steps.semantic.outputs.next_release.version }}"
      #     git push origin main
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
